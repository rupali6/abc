import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

public class SAXParserExample {

    public static void main(String[] args) {
        try {
            // Create a SAX parser
            org.xml.sax.XMLReader xmlReader = XMLReaderFactory.createXMLReader();

            // Set up a custom SAX handler
            MySAXHandler handler = new MySAXHandler();
            xmlReader.setContentHandler(handler);

            // Parse the XML document
            xmlReader.parse("your_xml_file.xml");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Custom SAX handler
    private static class MySAXHandler extends DefaultHandler {
        boolean inElement = false;

        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
            inElement = true;
            System.out.println("Start Element: " + qName);

            // Print attributes, if any
            for (int i = 0; i < attributes.getLength(); i++) {
                System.out.println("  Attribute: " + attributes.getQName(i) + " = " + attributes.getValue(i));
            }
        }

        public void characters(char[] ch, int start, int length) throws SAXException {
            if (inElement) {
                String data = new String(ch, start, length).trim();
                if (!data.isEmpty()) {
                    System.out.println("Text Content: " + data);
                }
            }
        }

        public void endElement(String uri, String localName, String qName) throws SAXException {
            inElement = false;
            System.out.println("End Element: " + qName);
        }
    }
}
